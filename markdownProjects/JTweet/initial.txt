<div markdown="1" class="card-panel white">

**Initial Progress**
=============
##### 2/16/2015


### Main Timeline Setup

This winter break I decided to teach myself Android Development to apply the knowledge of Java that I have gained from my first year at RIT.  I have already dabbled in Android Development when I made my first app SimpleCalc.  While it worked for the most part I wanted to learn the proper structure and techniques it takes to make a fully featured Android application.  In order to accomplish this I completed the Android Fundamentals tutorial on Udacity to learn about Activities, Fragments, Services, and more.  After I completed this I wanted to make my first fully featured Android application. My idea for a project came when I received a invitation to test out Twitters new Fabric API that allowed developers to integrate Twitter data into their applications with little effort.  So with this in mind, I decided I wanted to make a Twitter application that implemented Google’s new Material design specifications.

The first thing I had to do was learn how to use the new RecyclerView so the application could display a list of tweets.  The Udacity tutorial had me use a ListView with a custom adapter, so the change was not too difficult.  Once I got the RecyclerView working I populated it with CardView objects that could hold the most of the necessary Twitter data.  Then once I setup fabric and figured out how to pull the data I needed I had a very basic Twitter app that could display a tweet’s text and the username of the person who had tweeted it.


![alt text](../media/JTweet/text-based.png){: class="responsive-img col s6 offset-s3" }
{: class="row" }


The next step was to add the additional information and add a basic style.  So I had to add an image for the profile picture format the header of the tweet to include the name and username of the user.  I had a little trouble loading pictures into the RecyclerView. They would load but would stutter and overlap when scrolling.  I did some research and found out that Android has a hard time rendering images quickly and efficiently and about everyone recommended using custom libraries to accomplish smooth image integration.  I tried a bunch of different libraries and I ended up using Picasso for its ease of use and I liked how smoothly the images loaded when scrolling.


Up until this point all of the Tweet data had been loading directly from the network. While this is quick and easy, applications should not being using that much data and why reload data that has already been downloaded.  To solve this I created a SQLite database to store all the Tweet Data. It held the data for the username, name, tweet text, time posted, url of profile image.  I then had to go back to the Adapter I had made for the RecyclerView and alter it to not accept an Array of tweets but a Cursor to access the database.  Once I got that working the app ran much more smoothly and used a lot less data.  Once I setup the timeline I also implemented a service to update the tweets in the timeline in the background, every 5 minutes.


![alt text](../media/JTweet/links.png){: class="responsive-img col s6 offset-s3" }
{: class="row" }


### Creating the Profile Activity

After I completed this I was happy where the timeline was but I wanted to be able to view the profiles of the people who tweeted.  I created another Activity that contained another RecyclerView to hold the selected profile’s tweets. I decided that I did not want to store that data in a database so I had to create an Adapter to load data directly from the Twitters servers.  Once I had that created I added a navigation drawer that contained a button to get to the your own profile.  Once I knew that worked. I went to getting creating clickable strings in the Tweet text as links to profiles.  I created a class to find spans with and @ or # symbol. The @ being the symbol for tagging another user in a tweet and the # to symbolize a hashtag.  I created class then to changed the color of the text and made it clickable.  But now I was presented with a problem where I could find profile strings and make them clickable, but I had no way to switch profiles.  To solve this I created a interface to have a swapProfile method that the main Timeline Fragment then implemented.  In this method I would make a new Intent with the required data for the profile (The ID of the profile trying to be accessed) and then start the profile activity.


### Back to the Timeline

Now that I had profiles working I wanted to bring my attention back to the timeline.  When browsing the API for tweet objects, I found that they contain a entities attribute which has a media attribute.  This media attribute would hold the urls of the media attached to this post and in the case of what I was looking for was the image attached to the tweet.  I added an ImageView to my post and quickly had a timeline full of embedded images in tweets.  The only problem I had was that the Images were all different sizes and I felt like it made the timeline look cluttered.  OS I found on the Android documentation a animation that would zoom and image from a clickable thumbnail. After some styling tricks I got it to work and had clickable thumbnails that would zoom and un-zoom upon click.


![alt text](../media/JTweet/thumb-nail.png){: class="responsive-img col s4 offset-s2" }
![alt text](../media/JTweet/zoomzoomzoom.png){: class="responsive-img col s4 offset-s1" }
{: class="row" }


### Tweet Details

The next feature that needed to be added was a retweet, favorite, and reply button.  I initially added these buttons to the bottom of each tweet in the main timeline, but it made the timeline too cluttered.  To solve this I made a tweet activity that would be started to display a tweet in a CardView that contained the tweet and the buttons needed to implement all those features.  A method was added to the profileSwitch interface to have a swapToTweet method.  This method would be called whenever the user clicked text of a tweet.  From this I was able to then easily manipulate the Twitter API to allow the user to retweet and favorite the current tweet.


![alt text](../media/JTweet/plain-tweet.png){: class="responsive-img col s3" }
![alt text](../media/JTweet/favorite.png){: class="responsive-img col s3 offset-s1" }
![alt text](../media/JTweet/re-tweet.png){: class="responsive-img col s3 offset-s1" }
{: class="row" }


Next, a lot of tweets are conversations between users, so a thread view would be useful for a lot of users.  The problem is that the Twitter REST API does not give access to replies to a given tweet.  That is something I am going to revisit at another time. In the meantime it does give you the tweet that the current tweet is in reply to so by going up through the tweets in the conversation you can create a thread of tweets leading up until the initial tweet. 


![alt text](../media/JTweet/replies.png){: class="responsive-img col s6 offset-s3" }
{: class="row" }


### Composing a Tweet

It took me a long time to such a main feature because I was not sure how to implement it.  I knew for the tweet composition, I wanted a floating action button that would create a floating window that would hover over the timeline. As I looked up how to implement a FAB (Floating action button) I found a library that had an easy to use interface that allows the button to be attached to a RecyclerView to appear and disappear while scrolling. 

Once I had that working the next step was to figure out how to create a window.  After hours of research I found an example online on how to create a floating window.  I modified this example to have a edit text field and button to send the tweet.  I then hooked it up with Fabric and it worked flawlessly.  It was a little rough looking, but I can always style it later.


![alt text](../media/JTweet/compose.png){: class="responsive-img col s6 offset-s3" }
{: class="row" }


### Looking Ahead

Now with classes starting up again my progress as slowed but these are the features I have planned for the upcoming weeks.

- A Queue to Store Tweets to Load Into the Main Timeline
- Search Functionality
- More Material Design Styling<


</div>







